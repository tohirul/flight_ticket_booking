generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
  output          = "./generated/@prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum FlightStatus {
  Cancelled
  Confirmed
  Pending
  CheckedIn
  Boarded
  Delayed
  InFlight
  Arrived
  Departed
  Scheduled
}

enum BookingStatus {
  Confirmed
  Cancelled
  Pending
  CheckedIn
  NoShow
}

enum PassengerClass {
  Economy
  Business
  First
}

enum Gender {
  Male
  Female
  Other
  PreferNotToSay
}

model Country {
  id          String    @id @default(uuid())
  name        String    @unique
  countryCode String    @unique
  airlines    Airline[]
  airports    Airport[]
  cities      City[]
  State       State[]

  @@unique([name, countryCode])
  @@map("Country")
}

model State {
  id        String  @id @default(uuid())
  name      String
  stateCode String?
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId String
  cities    City[]

  @@unique([name, countryId])
  @@unique([stateCode, countryId])
  @@index([countryId])
}

model City {
  id              String    @id @default(uuid())
  name            String
  cityIATACode    String
  state           State?    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId         String?
  country         Country   @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId       String
  stateCountryKey String    @default("")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  airports        Airport[]

  @@unique([name, stateCountryKey])
  @@unique([cityIATACode, stateCountryKey])
  @@index([countryId])
  @@index([stateId])
}

model Airline {
  id        String     @id @default(uuid())
  name      String
  country   Country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId String
  logo      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  planes    Airplane[]
  flights   Flight[]

  @@index([countryId])
}

model Airplane {
  id           String   @id @default(uuid())
  model        String
  year         Int
  seats        Int
  capacity     Int
  manufacturer String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  airline      Airline  @relation(fields: [airlineId], references: [id], onDelete: Cascade)
  airlineId    String
  flights      Flight[]

  @@index([airlineId])
}

model Airport {
  id          String   @id @default(uuid())
  name        String
  code        String   @unique
  city        City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId      String
  lat         Float
  lng         Float
  address     String   @unique
  timezone    String
  website     String?
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  country     Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId   String
  departures  Flight[] @relation("Departure")
  arrivals    Flight[] @relation("Arrival")

  @@index([cityId])
  @@index([countryId])
  @@index([timezone])
}

model Flight {
  id             String       @id @default(uuid())
  airline        Airline?     @relation(fields: [airlineId], references: [id], onDelete: SetNull)
  airlineId      String?
  airplane       Airplane?    @relation(fields: [airplaneId], references: [id], onDelete: SetNull)
  airplaneId     String?
  departureTime  DateTime
  arrivalTime    DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  flightDuration Int
  flightDistance Int
  fromAirport    Airport      @relation("Departure", fields: [fromAirportId], references: [id], onDelete: Cascade)
  fromAirportId  String
  toAirport      Airport      @relation("Arrival", fields: [toAirportId], references: [id], onDelete: Cascade)
  toAirportId    String
  flightNumber   String       @unique
  flightStatus   FlightStatus
  bookings       Booking[]

  @@index([airlineId])
  @@index([airplaneId])
}

model Passenger {
  id                  String    @id @default(uuid())
  firstName           String
  lastName            String
  email               String    @unique
  phone               String    @unique
  dateOfBirth         DateTime
  gender              Gender
  nationality         String
  passportNumber      String
  address             String
  emergencyContact    String
  emergencyPhone      String
  frequentFlyer       Boolean   @default(false)
  mealPreference      String?
  specialRequirements String?
  bookingDate         DateTime  @default(now())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  bookings            Booking[]

  @@map("Passenger")
}

model Booking {
  id             String         @id @default(uuid())
  passenger      Passenger      @relation(fields: [passengerId], references: [id], onDelete: Cascade)
  passengerId    String
  flight         Flight         @relation(fields: [flightId], references: [id], onDelete: Cascade)
  flightId       String
  seatNumber     String
  bookingDate    DateTime       @default(now())
  passengerClass PassengerClass
  bookingStatus  BookingStatus

  @@index([passengerId])
  @@index([flightId])
}
